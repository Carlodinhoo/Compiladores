/* The following code was generated by JFlex 1.4.3 on 3/15/18 1:13 AM */

package testmaven;
import java.util.Stack;
import java.util.Arrays;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/15/18 1:13 AM from the specification file
 * <tt>/Users/juan/Documents/Repositorio/Compiladores/practicas/practica02/Practica_2/codigo/src/main/jflex/Atomos.jflex</tt>
 */
public class AnalizadorPython {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int otro = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\5\25\0\1\45\1\10\1\41\1\4\1\0\1\10\4\0"+
    "\1\11\1\10\1\0\1\10\1\1\1\12\1\3\11\2\1\44\1\0"+
    "\1\6\1\7\1\6\2\0\5\43\1\43\15\43\1\43\6\43\1\0"+
    "\1\42\4\0\1\13\1\22\1\24\1\15\1\17\1\31\1\36\1\40"+
    "\1\27\1\43\1\23\1\25\1\35\1\14\1\26\1\33\1\43\1\20"+
    "\1\16\1\21\1\30\1\43\1\37\1\32\1\34\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\3\1\4\1\5\4\1\21\6"+
    "\1\2\1\7\1\10\1\11\1\10\1\12\1\0\1\6"+
    "\1\13\13\6\1\13\11\6\1\0\1\14\1\15\1\16"+
    "\41\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\114\0\344"+
    "\0\114\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\114\0\114\0\114"+
    "\0\u0402\0\114\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6"+
    "\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616"+
    "\0\u01c8\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720"+
    "\0\u0746\0\u076c\0\u03dc\0\114\0\114\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\17\1\24\1\25\1\26\1\27\1\17\1\30"+
    "\1\17\1\31\1\32\1\17\1\33\1\34\1\17\1\35"+
    "\1\3\1\17\1\36\1\3\5\37\1\40\4\37\1\41"+
    "\32\37\1\42\47\0\1\43\2\4\43\0\1\43\1\0"+
    "\1\5\42\0\5\6\1\0\40\6\7\0\1\11\47\0"+
    "\1\12\46\0\1\11\35\0\2\17\7\0\1\17\1\44"+
    "\1\17\1\45\22\17\2\0\1\17\4\0\2\17\7\0"+
    "\13\17\1\46\12\17\2\0\1\17\4\0\2\17\7\0"+
    "\4\17\1\47\21\17\2\0\1\17\4\0\2\17\7\0"+
    "\26\17\2\0\1\17\4\0\2\17\7\0\12\17\1\50"+
    "\4\17\1\51\6\17\2\0\1\17\4\0\2\17\7\0"+
    "\1\52\3\17\1\53\21\17\2\0\1\17\4\0\2\17"+
    "\7\0\5\17\1\54\20\17\2\0\1\17\4\0\2\17"+
    "\7\0\5\17\1\55\20\17\2\0\1\17\4\0\2\17"+
    "\7\0\12\17\1\56\1\57\12\17\2\0\1\17\4\0"+
    "\2\17\7\0\1\60\25\17\2\0\1\17\4\0\2\17"+
    "\7\0\5\17\1\61\20\17\2\0\1\17\4\0\2\17"+
    "\7\0\1\17\1\61\1\17\1\61\12\17\1\61\3\17"+
    "\1\62\3\17\2\0\1\17\4\0\2\17\7\0\5\17"+
    "\1\63\5\17\1\26\1\64\11\17\2\0\1\17\4\0"+
    "\2\17\7\0\1\65\4\17\1\66\20\17\2\0\1\17"+
    "\4\0\2\17\7\0\14\17\1\67\11\17\2\0\1\17"+
    "\4\0\2\17\7\0\12\17\1\70\13\17\2\0\1\17"+
    "\4\0\2\17\7\0\14\17\1\71\10\17\1\72\2\0"+
    "\1\17\2\0\41\73\1\74\1\0\3\73\21\0\1\75"+
    "\26\0\1\76\45\0\2\17\7\0\2\17\1\61\23\17"+
    "\2\0\1\17\4\0\2\17\7\0\3\17\1\77\22\17"+
    "\2\0\1\17\4\0\2\17\7\0\6\17\1\61\17\17"+
    "\2\0\1\17\4\0\2\17\7\0\12\17\1\61\3\17"+
    "\1\61\7\17\2\0\1\17\4\0\2\17\7\0\3\17"+
    "\1\100\10\17\1\101\11\17\2\0\1\17\4\0\2\17"+
    "\7\0\4\17\1\102\4\17\1\103\14\17\2\0\1\17"+
    "\4\0\2\17\7\0\14\17\1\104\11\17\2\0\1\17"+
    "\4\0\2\17\7\0\6\17\1\105\17\17\2\0\1\17"+
    "\4\0\2\17\7\0\21\17\1\61\4\17\2\0\1\17"+
    "\4\0\2\17\7\0\4\17\1\106\21\17\2\0\1\17"+
    "\4\0\2\17\7\0\1\65\25\17\2\0\1\17\4\0"+
    "\2\17\7\0\1\17\1\107\24\17\2\0\1\17\4\0"+
    "\2\17\7\0\22\17\1\110\3\17\2\0\1\17\4\0"+
    "\2\17\7\0\20\17\1\111\5\17\2\0\1\17\4\0"+
    "\2\17\7\0\13\17\1\112\12\17\2\0\1\17\4\0"+
    "\2\17\7\0\1\17\1\113\24\17\2\0\1\17\4\0"+
    "\2\17\7\0\3\17\1\114\22\17\2\0\1\17\4\0"+
    "\2\17\7\0\14\17\1\115\11\17\2\0\1\17\4\0"+
    "\2\17\7\0\4\17\1\116\21\17\2\0\1\17\4\0"+
    "\2\17\7\0\13\17\1\117\12\17\2\0\1\17\4\0"+
    "\2\17\7\0\6\17\1\120\17\17\2\0\1\17\4\0"+
    "\2\17\7\0\14\17\1\121\11\17\2\0\1\17\4\0"+
    "\2\76\44\0\2\17\7\0\4\17\1\122\21\17\2\0"+
    "\1\17\4\0\2\17\7\0\4\17\1\61\21\17\2\0"+
    "\1\17\4\0\2\17\7\0\16\17\1\61\7\17\2\0"+
    "\1\17\4\0\2\17\7\0\11\17\1\61\14\17\2\0"+
    "\1\17\4\0\2\17\7\0\4\17\1\123\21\17\2\0"+
    "\1\17\4\0\2\17\7\0\3\17\1\100\22\17\2\0"+
    "\1\17\4\0\2\17\7\0\15\17\1\124\10\17\2\0"+
    "\1\17\4\0\2\17\7\0\1\125\25\17\2\0\1\17"+
    "\4\0\2\17\7\0\6\17\1\126\17\17\2\0\1\17"+
    "\4\0\2\17\7\0\7\17\1\127\16\17\2\0\1\17"+
    "\4\0\2\17\7\0\13\17\1\122\12\17\2\0\1\17"+
    "\4\0\2\17\7\0\22\17\1\61\3\17\2\0\1\17"+
    "\4\0\2\17\7\0\1\130\25\17\2\0\1\17\4\0"+
    "\2\17\7\0\3\17\1\61\22\17\2\0\1\17\4\0"+
    "\2\17\7\0\1\17\1\46\24\17\2\0\1\17\4\0"+
    "\2\17\7\0\12\17\1\44\13\17\2\0\1\17\4\0"+
    "\2\17\7\0\7\17\1\131\16\17\2\0\1\17\4\0"+
    "\2\17\7\0\25\17\1\61\2\0\1\17\4\0\2\17"+
    "\7\0\12\17\1\100\13\17\2\0\1\17\4\0\2\17"+
    "\7\0\5\17\1\46\20\17\2\0\1\17\4\0\2\17"+
    "\7\0\20\17\1\46\5\17\2\0\1\17\4\0\2\17"+
    "\7\0\5\17\1\132\20\17\2\0\1\17\4\0\2\17"+
    "\7\0\10\17\1\61\15\17\2\0\1\17\4\0\2\17"+
    "\7\0\14\17\1\133\11\17\2\0\1\17\4\0\2\17"+
    "\7\0\2\17\1\134\23\17\2\0\1\17\4\0\2\17"+
    "\7\0\12\17\1\135\13\17\2\0\1\17\4\0\2\17"+
    "\7\0\1\136\25\17\2\0\1\17\4\0\2\17\7\0"+
    "\1\17\1\61\24\17\2\0\1\17\4\0\2\17\7\0"+
    "\1\17\1\137\24\17\2\0\1\17\4\0\2\17\7\0"+
    "\1\61\25\17\2\0\1\17\4\0\2\17\7\0\12\17"+
    "\1\54\13\17\2\0\1\17\4\0\2\17\7\0\12\17"+
    "\1\61\13\17\2\0\1\17\4\0\2\17\7\0\15\17"+
    "\1\100\10\17\2\0\1\17\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3230];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\3\1\1\11\1\1\1\11\24\1"+
    "\3\11\1\1\1\11\1\0\27\1\1\0\2\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


static Stack<Integer> pila = new Stack<Integer>();
static int espacios=0;
static int t;
static boolean p = true;

public static void recorre(int espa){
    if(pila.empty()){
        pila.push(espa);
        System.out.print("IDENTACION "+pila.peek());
    }else{
        if(espa > pila.peek()){
            int identacion = pila.push(espa);
            System.out.print("IDENTACION "+identacion);
        }else{
            if(espa <= pila.peek()){
                while(!pila.empty()){
                        pila.pop();
                    if(pila.empty()){
                        System.out.print("Error");
                    }
                }
            }
            System.out.print("DEIDENTACION "+espa); 
        }
        
    }
    espacios = 0;   
}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorPython(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorPython(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { System.out.print("SALTO("+yytext() + ")");
                    yybegin(otro);
          }
        case 15: break;
        case 3: 
          { System.out.print("ENTERO("+yytext() + ")");
          }
        case 16: break;
        case 6: 
          { System.out.print("IDENTIFICADORES("+yytext() + ")");
          }
        case 17: break;
        case 9: 
          { System.out.print(yytext());
          }
        case 18: break;
        case 7: 
          { System.out.print("SEPARADOR(" + yytext() + ")");
          }
        case 19: break;
        case 1: 
          { System.out.print("OPERADORES("+yytext() + ")");
          }
        case 20: break;
        case 14: 
          { System.out.print("FLOTANTE("+yytext() + ")");
          }
        case 21: break;
        case 11: 
          { System.out.print("RESERVADA("+yytext() + ")");
          }
        case 22: break;
        case 8: 
          { yybegin(YYINITIAL);
  recorre(espacios);
          }
        case 23: break;
        case 12: 
          { System.out.print("CADENA("+yytext() + ")");
          }
        case 24: break;
        case 10: 
          { espacios++;
          }
        case 25: break;
        case 4: 
          { System.out.print("COMENTARIO("+yytext() + ")");
          }
        case 26: break;
        case 13: 
          { espacios+=4;
          }
        case 27: break;
        case 2: 
          { 
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorPython <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorPython scanner = null;
        try {
          scanner = new AnalizadorPython( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
