/* The following code was generated by JFlex 1.4.3 on 25/04/18 11:54 PM */

/********************************************************************************
**  Analizador l√©xico para p, subconjunto de Python.	                       **
*********************************************************************************/
package asintactico;
import java.util.Stack;
import java.util.Arrays;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25/04/18 11:54 PM from the specification file
 * <tt>/Users/hectorsama/Documents/Repositorios/Compiladores/Proyectos/Proyecto_2/src/main/jflex/Atomos.jflex</tt>
 */
public class Flexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int DEDENT = 8;
  public static final int YYINITIAL = 0;
  public static final int NORMAL = 2;
  public static final int INDENT = 6;
  public static final int CADENA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\15\25\0\1\17\1\30\1\34\1\14\1\16\1\24"+
    "\2\0\1\31\1\32\1\22\1\20\1\0\1\21\1\1\1\23\1\2"+
    "\11\2\1\33\1\16\1\25\1\27\1\26\2\0\5\3\1\10\15\3"+
    "\1\4\6\3\4\0\1\3\1\0\1\11\2\3\1\40\1\7\1\44"+
    "\1\3\1\46\1\43\2\3\1\12\1\3\1\37\1\36\1\42\1\3"+
    "\1\5\1\13\1\41\1\6\1\3\1\45\3\3\57\0\1\3\12\0"+
    "\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0\u01ca\3\4\0"+
    "\14\3\16\0\5\3\7\0\1\3\1\0\1\3\201\0\5\3\1\0"+
    "\2\3\2\0\4\3\10\0\1\3\1\0\3\3\1\0\1\3\1\0"+
    "\24\3\1\0\123\3\1\0\213\3\10\0\236\3\11\0\46\3\2\0"+
    "\1\3\7\0\47\3\110\0\33\3\5\0\3\3\55\0\53\3\25\0"+
    "\12\16\4\0\2\3\1\0\143\3\1\0\1\3\17\0\2\3\7\0"+
    "\2\3\12\16\3\3\2\0\1\3\20\0\1\3\1\0\36\3\35\0"+
    "\131\3\13\0\1\3\16\0\12\16\41\3\11\0\2\3\4\0\1\3"+
    "\5\0\26\3\4\0\1\3\11\0\1\3\3\0\1\3\27\0\31\3"+
    "\107\0\1\3\1\0\13\3\127\0\66\3\3\0\1\3\22\0\1\3"+
    "\7\0\12\3\4\0\12\16\1\0\7\3\1\0\7\3\5\0\10\3"+
    "\2\0\2\3\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3"+
    "\3\0\1\3\20\0\1\3\15\0\2\3\1\0\3\3\4\0\12\16"+
    "\2\3\23\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\37\0\4\3\1\0\1\3\7\0"+
    "\12\16\2\0\3\3\20\0\11\3\1\0\3\3\1\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\5\3\3\0\1\3\22\0\1\3\17\0"+
    "\2\3\4\0\12\16\25\0\10\3\2\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\5\3\3\0\1\3\36\0\2\3\1\0"+
    "\3\3\4\0\12\16\1\0\1\3\21\0\1\3\1\0\6\3\3\0"+
    "\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0"+
    "\2\3\3\0\3\3\3\0\14\3\26\0\1\3\25\0\12\16\25\0"+
    "\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0"+
    "\1\3\32\0\2\3\6\0\2\3\4\0\12\16\25\0\10\3\1\0"+
    "\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0\1\3\40\0"+
    "\1\3\1\0\2\3\4\0\12\16\1\0\2\3\22\0\10\3\1\0"+
    "\3\3\1\0\51\3\2\0\1\3\20\0\1\3\21\0\2\3\4\0"+
    "\12\16\12\0\6\3\5\0\22\3\3\0\30\3\1\0\11\3\1\0"+
    "\1\3\2\0\7\3\72\0\60\3\1\0\2\3\14\0\7\3\11\0"+
    "\12\16\47\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0"+
    "\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\2\0\2\3\1\0\4\3\1\0\2\3\11\0\1\3\2\0"+
    "\5\3\1\0\1\3\11\0\12\16\2\0\4\3\40\0\1\3\37\0"+
    "\12\16\26\0\10\3\1\0\44\3\33\0\5\3\163\0\53\3\24\0"+
    "\1\3\12\16\6\0\6\3\4\0\4\3\3\0\1\3\3\0\2\3"+
    "\7\0\3\3\4\0\15\3\14\0\1\3\1\0\12\16\6\0\46\3"+
    "\1\0\1\3\5\0\1\3\2\0\53\3\1\0\u014d\3\1\0\4\3"+
    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\51\3\1\0\4\3"+
    "\2\0\41\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3"+
    "\2\0\17\3\1\0\71\3\1\0\4\3\2\0\103\3\45\0\20\3"+
    "\20\0\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3"+
    "\25\0\15\3\1\0\4\3\16\0\22\3\16\0\22\3\16\0\15\3"+
    "\1\0\3\3\17\0\64\3\43\0\1\3\4\0\1\3\3\0\12\16"+
    "\46\0\12\16\6\0\130\3\10\0\51\3\1\0\1\3\5\0\106\3"+
    "\12\0\35\3\51\0\12\16\36\3\2\0\5\3\13\0\54\3\25\0"+
    "\7\3\10\0\12\16\46\0\27\3\11\0\65\3\53\0\12\16\6\0"+
    "\12\16\15\0\1\3\135\0\57\3\21\0\7\3\4\0\12\16\51\0"+
    "\36\3\15\0\2\3\12\16\54\3\32\0\44\3\34\0\12\16\3\0"+
    "\3\3\12\16\44\3\153\0\4\3\1\0\4\3\3\0\2\3\11\0"+
    "\300\3\100\0\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3\2\0"+
    "\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3\2\0"+
    "\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0"+
    "\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3\164\0"+
    "\1\3\15\0\1\3\20\0\15\3\145\0\1\3\4\0\1\3\2\0"+
    "\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0"+
    "\1\3\64\0\2\3\u0a7b\0\57\3\1\0\57\3\1\0\205\3\6\0"+
    "\4\3\3\0\2\3\14\0\46\3\1\0\1\3\5\0\1\3\2\0"+
    "\70\3\7\0\1\3\20\0\27\3\11\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\120\0\1\3\u01d5\0\2\3\52\0\5\3\5\0\2\3\4\0"+
    "\126\3\6\0\3\3\1\0\132\3\1\0\4\3\5\0\51\3\3\0"+
    "\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0\u51cd\3\63\0"+
    "\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3\12\16\2\3\24\0"+
    "\57\3\20\0\31\3\10\0\106\3\61\0\11\3\2\0\147\3\2\0"+
    "\4\3\1\0\4\3\14\0\13\3\115\0\12\3\1\0\3\3\1\0"+
    "\4\3\1\0\27\3\35\0\64\3\16\0\62\3\34\0\12\16\30\0"+
    "\6\3\3\0\1\3\4\0\12\16\34\3\12\0\27\3\31\0\35\3"+
    "\7\0\57\3\34\0\1\3\12\16\46\0\51\3\27\0\3\3\1\0"+
    "\10\3\4\0\12\16\6\0\27\3\3\0\1\3\5\0\60\3\1\0"+
    "\1\3\3\0\2\3\2\0\5\3\2\0\1\3\1\0\1\3\30\0"+
    "\3\3\2\0\13\3\7\0\3\3\14\0\6\3\2\0\6\3\2\0"+
    "\6\3\11\0\7\3\1\0\7\3\221\0\43\3\15\0\12\16\6\0"+
    "\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0\u016e\3\2\0\152\3\46\0"+
    "\7\3\14\0\5\3\5\0\1\3\1\0\12\3\1\0\15\3\1\0"+
    "\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\154\3\41\0"+
    "\u016b\3\22\0\100\3\2\0\66\3\50\0\14\3\164\0\5\3\1\0"+
    "\207\3\23\0\12\16\7\0\32\3\6\0\32\3\13\0\131\3\3\0"+
    "\6\3\2\0\6\3\2\0\6\3\2\0\3\3\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\2\1\2\2\1\3\1\4\6\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\2"+
    "\1\16\1\17\1\20\1\21\5\5\2\2\1\22\1\2"+
    "\1\23\2\24\1\25\1\26\1\27\2\30\1\0\1\31"+
    "\1\0\5\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\5\1\40\1\5\4\0\1\23\4\5\1\41\1\42"+
    "\2\5\1\43\1\5\1\44\3\5\1\45\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\303"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\352\0\303\0\303\0\303\0\u0270\0\303\0\303"+
    "\0\u0297\0\u02be\0\u02e5\0\u030c\0\303\0\303\0\303\0\303"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\303"+
    "\0\u0444\0\303\0\303\0\352\0\303\0\303\0\303\0\303"+
    "\0\352\0\352\0\303\0\u0111\0\u046b\0\u0492\0\u04b9\0\u04e0"+
    "\0\u0507\0\303\0\303\0\303\0\303\0\303\0\u0186\0\u052e"+
    "\0\u0555\0\u0186\0\u057c\0\u03f6\0\u0444\0\u041d\0\u05a3\0\352"+
    "\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0186\0\u0186\0\u0666\0\u068d"+
    "\0\u0186\0\u06b4\0\u0186\0\u06db\0\u0702\0\u0729\0\u0186\0\u0186"+
    "\0\u0186";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\6\1\7\1\10\1\6\1\11\15\6\1\11\11\6"+
    "\1\10\1\12\1\13\1\14\1\15\1\16\1\14\1\17"+
    "\1\20\1\21\2\14\1\22\1\23\2\10\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\10\1\41\1\42\2\14\1\43"+
    "\1\44\1\14\1\45\1\14\2\10\12\46\1\47\1\50"+
    "\12\46\1\51\3\46\1\52\1\10\11\46\14\53\1\54"+
    "\1\55\1\53\1\56\15\53\1\57\11\53\14\60\1\61"+
    "\1\10\31\60\47\0\15\62\1\10\31\62\14\63\2\0"+
    "\1\63\1\64\15\63\1\64\11\63\2\0\1\12\45\0"+
    "\1\12\1\13\46\0\12\14\22\0\11\14\2\0\3\14"+
    "\1\65\6\14\22\0\11\14\2\0\5\14\1\66\4\14"+
    "\22\0\11\14\2\0\10\14\1\67\1\14\22\0\11\14"+
    "\2\0\7\14\1\70\2\14\22\0\11\14\2\0\12\14"+
    "\22\0\1\14\1\71\7\14\22\0\1\72\53\0\1\73"+
    "\46\0\1\74\46\0\1\75\46\0\1\76\21\0\3\14"+
    "\1\77\6\14\22\0\11\14\2\0\12\14\22\0\1\100"+
    "\10\14\2\0\3\14\1\101\6\14\22\0\11\14\2\0"+
    "\12\14\22\0\6\14\1\102\2\14\2\0\12\14\22\0"+
    "\10\14\1\103\2\0\13\104\1\0\12\104\1\105\3\104"+
    "\1\52\1\0\11\104\2\62\13\106\1\10\12\106\1\107"+
    "\3\106\1\110\1\62\11\106\27\0\1\104\21\0\4\14"+
    "\1\111\5\14\22\0\11\14\2\0\12\14\22\0\3\14"+
    "\1\112\5\14\2\0\11\14\1\113\22\0\11\14\2\0"+
    "\10\14\1\114\1\14\22\0\11\14\2\0\12\14\22\0"+
    "\2\14\1\115\6\14\2\0\12\14\22\0\3\14\1\116"+
    "\5\14\2\0\12\14\22\0\5\14\1\117\3\14\2\0"+
    "\12\14\22\0\5\14\1\120\3\14\15\62\1\10\11\62"+
    "\1\106\17\62\2\0\5\14\1\121\4\14\22\0\11\14"+
    "\2\0\4\14\1\122\5\14\22\0\11\14\2\0\5\14"+
    "\1\123\4\14\22\0\11\14\2\0\11\14\1\111\22\0"+
    "\11\14\2\0\12\14\22\0\1\14\1\124\7\14\2\0"+
    "\10\14\1\125\1\14\22\0\11\14\2\0\3\14\1\126"+
    "\6\14\22\0\11\14\2\0\12\14\22\0\3\14\1\127"+
    "\5\14\2\0\5\14\1\130\4\14\22\0\11\14\2\0"+
    "\12\14\22\0\1\14\1\131\7\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\12\1\3\11\1\1\2\11"+
    "\4\1\4\11\7\1\1\11\1\1\2\11\1\1\4\11"+
    "\1\1\1\0\1\11\1\0\5\1\5\11\5\1\4\0"+
    "\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Parser
  private Parser yyparser;

  /**
  * Nuevo constructor
  * @param FileReader r
  * @param Parser parser - parser
  */
  public Flexer(java.io.Reader r, Parser parser){
    this(r);
    this.yyparser = parser;
  }

  // Variables auxiliares para la indentaci√≥n
  static Stack<Integer> pila = new Stack<Integer>();
  static Integer actual = 0;
  static String cadena = "";
  static int dedents = 0;
  static int indents = 0;

  /**
  * Funci√≥n que maneja los niveles de indentaci√≥n y regresa √°tomos INDENT y DEDENT
  * @param int espacios - nivel de indetaci√≥n actual.
  * @return void
  */
  public void indentacion(int espacios){
    if(pila.empty()){ //ponerle un cero a la pila si esta vacia
      pila.push(new Integer(0));             
    }

    Integer tope = pila.peek();

    if(tope != espacios){
      //Se debe emitir un DEDENT por cada nivel mayor al actual
      if(tope > espacios){
        while(pila.peek() > espacios &&  pila.peek()!=0 ){
          pila.pop();             
          dedents += 1;                                 
        }

        if(pila.peek() == espacios){
          yybegin(DEDENT);	       
        }else{
          System.out.println("IndentationError: line "+(yyline+1));
          System.exit(1);		    
        }

        return;
      }

      //El nivel actual de indentaci√≥n es mayor a los anteriores.
      pila.push(espacios);
      yybegin(NORMAL);
      indents = 1;
    }else yybegin(NORMAL);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Flexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Flexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1696) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [122] { return Parser.DIV; }");
          { return Parser.DIV;
          }
        case 40: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [129] { return Parser.AND; }");
          { return Parser.AND;
          }
        case 41: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [130] { return Parser.NOT; }");
          { return Parser.NOT;
          }
        case 42: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [142] { return Parser.WHILE; }");
          { return Parser.WHILE;
          }
        case 43: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [139] { return Parser.RETURN; }");
          { return Parser.RETURN;
          }
        case 44: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [124] { return Parser.POTENCIA; }");
          { return Parser.POTENCIA;
          }
        case 45: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [132] { return Parser.MENOR; }");
          { return Parser.MENOR;
          }
        case 46: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [117] { return Parser.REAL; }");
          { return Parser.REAL;
          }
        case 47: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [135] { return Parser.MAYORIGUAL; }");
          { return Parser.MAYORIGUAL;
          }
        case 48: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [144] { yybegin(INDENT); actual=0; }");
          { yybegin(INDENT); actual=0;
          }
        case 49: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [137] { return Parser.DISTINTO; }");
          { return Parser.DISTINTO;
          }
        case 50: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [104] { System.out.println(\"Error de indentaci√≥n. L√≠nea \"+(yyline+1));"+ZZ_NL+"\t\t\t\t\t    System.exit(1); }");
          { System.out.println("Error de indentaci√≥n. L√≠nea "+(yyline+1));
					    System.exit(1);
          }
        case 51: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [140] { return Parser.IF; }");
          { return Parser.IF;
          }
        case 52: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [143] { return Parser.IDENTIFICADOR; }");
          { return Parser.IDENTIFICADOR;
          }
        case 53: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [96] { yybegin(NORMAL); return Parser.CADENA; }");
          { yybegin(NORMAL); return Parser.CADENA;
          }
        case 54: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [136] { return Parser.MENORIGUAL; }");
          { return Parser.MENORIGUAL;
          }
        case 55: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [107] { yypushback(1); yybegin(NORMAL); }");
          { yypushback(1); yybegin(NORMAL);
          }
        case 56: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [121] { return Parser.POR; }");
          { return Parser.POR;
          }
        case 57: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [127] { return Parser.PARENTESIS2; }");
          { return Parser.PARENTESIS2;
          }
        case 58: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [138] { return Parser.PRINT; }");
          { return Parser.PRINT;
          }
        case 59: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [119] { return Parser.MAS; }");
          { return Parser.MAS;
          }
        case 60: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [97] { System.out.println(\"Cadena mal construida, linea \" + (yyline+1) ); System.exit(1); }");
          { System.out.println("Cadena mal construida, linea " + (yyline+1) ); System.exit(1);
          }
        case 61: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [148] { actual = 0; }");
          { actual = 0;
          }
        case 62: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [150] { actual += 4; }");
          { actual += 4;
          }
        case 63: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [128] { return Parser.OR; }");
          { return Parser.OR;
          }
        case 64: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [162] { yypushback(1);"+ZZ_NL+"                                     if(dedents > 0){"+ZZ_NL+"                                      dedents--;"+ZZ_NL+"                                      return Parser.DEDENT;"+ZZ_NL+"                                     }"+ZZ_NL+"                                     yybegin(NORMAL); }");
          { yypushback(1);
                                     if(dedents > 0){
                                      dedents--;
                                      return Parser.DEDENT;
                                     }
                                     yybegin(NORMAL);
          }
        case 65: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [125] { return Parser.DOSPUNTOS; }");
          { return Parser.DOSPUNTOS;
          }
        case 66: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [151] { yypushback(1);"+ZZ_NL+"                                     this.indentacion(actual);"+ZZ_NL+"                                     //yybegin(NORMAL);"+ZZ_NL+"                                     if(indents == 1){"+ZZ_NL+"                                      indents = 0;"+ZZ_NL+"                                      return Parser.INDENT;"+ZZ_NL+"                                     } }");
          { yypushback(1);
                                     this.indentacion(actual);
                                     //yybegin(NORMAL);
                                     if(indents == 1){
                                      indents = 0;
                                      return Parser.INDENT;
                                     }
          }
        case 67: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [133] { return Parser.MAYOR; }");
          { return Parser.MAYOR;
          }
        case 68: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [118] { return Parser.ENTERO; }");
          { return Parser.ENTERO;
          }
        case 69: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [120] { return Parser.MENOS; }");
          { return Parser.MENOS;
          }
        case 70: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [141] { return Parser.ELSE; }");
          { return Parser.ELSE;
          }
        case 71: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [116] { yybegin(CADENA); }");
          { yybegin(CADENA);
          }
        case 72: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [149] { actual++; }");
          { actual++;
          }
        case 73: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [126] { return Parser.PARENTESIS1; }");
          { return Parser.PARENTESIS1;
          }
        case 74: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [131] { return Parser.BOOLEAN; }");
          { return Parser.BOOLEAN;
          }
        case 75: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [134] { return Parser.IGUALIGUAL; }");
          { return Parser.IGUALIGUAL;
          }
        case 76: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] {  }");
          { 
          }
        case 77: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [123] { return Parser.MODULO; }");
          { return Parser.MODULO;
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                System.out.println("line: "+(yyline+1)+" "+"match: <<EOF>>");
                System.out.println("action [171] { this.indentacion(0);"+ZZ_NL+"                                     if(dedents > 0){"+ZZ_NL+"                                      dedents--;"+ZZ_NL+"                                      return Parser.DEDENT;"+ZZ_NL+"                                     }else{"+ZZ_NL+"                                      return 0;"+ZZ_NL+"                                     } }");
                this.indentacion(0);
                                     if(dedents > 0){
                                      dedents--;
                                      return Parser.DEDENT;
                                     }else{
                                      return 0;
                                     }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Flexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Flexer scanner = null;
        try {
          scanner = new Flexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
